// Test generated by RoostGPT for test ballot-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"testing"
)

type Vote struct {
	CandidateID string
}

var candidateVotesStore = make(map[string]int)

func saveVote(vote Vote) error {
	candidateVotesStore[vote.CandidateID]++
	return nil
}

func TestSaveVote_3a682778fa(t *testing.T) {
	t.Run("Test saveVote with valid candidate ID", func(t *testing.T) {
		vote := Vote{
			CandidateID: "John",
		}

		err := saveVote(vote)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}

		if candidateVotesStore[vote.CandidateID] != 1 {
			t.Error("Expected 1, but got", candidateVotesStore[vote.CandidateID])
		}
	})

	t.Run("Test saveVote with multiple votes", func(t *testing.T) {
		vote := Vote{
			CandidateID: "John",
		}

		err := saveVote(vote)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}

		err = saveVote(vote)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}

		if candidateVotesStore[vote.CandidateID] != 3 {
			t.Error("Expected 3, but got", candidateVotesStore[vote.CandidateID])
		}
	})

	t.Run("Test saveVote with different candidate IDs", func(t *testing.T) {
		vote1 := Vote{
			CandidateID: "John",
		}

		vote2 := Vote{
			CandidateID: "Doe",
		}

		err := saveVote(vote1)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}

		err = saveVote(vote2)
		if err != nil {
			t.Error("Expected no error, but got", err)
		}

		if candidateVotesStore[vote1.CandidateID] != 4 {
			t.Error("Expected 4, but got", candidateVotesStore[vote1.CandidateID])
		}

		if candidateVotesStore[vote2.CandidateID] != 1 {
			t.Error("Expected 1, but got", candidateVotesStore[vote2.CandidateID])
		}
	})
}
